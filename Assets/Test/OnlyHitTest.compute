#pragma kernel CSMain

struct LKDNode {
	float3 min;
	float3 max;
	int leftChild;
	int rightChild;
	int dataBegin;
	int dataEnd;
};

struct Triangle {
	float3 vertex0;
	float3 vertex1;
	float3 vertex2;
	float3 normal0;
	float3 normal1;
	float3 normal2;
};

StructuredBuffer<LKDNode> _Tree;
StructuredBuffer<Triangle> _Triangles;
RWStructuredBuffer<uint> _Args;
RWStructuredBuffer<Triangle> _Result;

int _NodeCounts;
int _RootNode;

float4 _Origin;
float4 _Direction;

int RaycastTriangle(float3 dir, float3 orig, Triangle tg, inout float rt) {

	float3 o = orig + normalize(dir) * 0.0000001;

	float3 e1 = tg.vertex1 - tg.vertex0;
	float3 e2 = tg.vertex2 - tg.vertex0;

	float2 uv = 0;

	float3 n = cross(e1, e2);
	float ndv = dot(dir, n);

	float3 p = cross(dir, e2);

	float det = dot(e1, p);
	float3 t = float3(0, 0, 0);
	if (det > 0.0)
	{
		t = o - tg.vertex0;
	}
	else
	{
		t = tg.vertex0 - o;
		det = -det;
	}
	if (det < 0.0000001f)
	{
		return -1;
	}

	uv.x = dot(t, p);
	if (uv.x < 0.0f || uv.x > det)
		return -1;

	float3 q = cross(t, e1);

	uv.y = dot(dir, q);
	if (uv.y < 0.0f || uv.x + uv.y > det)
		return -1;

	float myt = dot(e2, q);

	float finvdet = 1.0f / det;
	myt *= finvdet;
	if (myt < 0.001f)
		return -1;
	if (myt > rt)
		return -1;
	rt = myt;
	//uv.x *= finvdet;
	//uv.y *= finvdet;

	//hitvertex = o + dir * rt;
	//hitnormal = (1.0 - uv.x - uv.y) * tg.normal0 + uv.x * tg.normal1 + uv.y * tg.normal2;

	return 1;
}

int RaycastBounds(float3 bmin, float3 bmax, float3 origin, float3 direction) {
	float tmin = -999999999;
	float tmax = 999999999;
	float t1, t2;

	if (direction.x != 0.0) {
		t1 = (bmin.x - origin.x) / direction.x;
		t2 = (bmax.x - origin.x) / direction.x;

		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (direction.y != 0.0) {
		t1 = (bmin.y - origin.y) / direction.y;
		t2 = (bmax.y - origin.y) / direction.y;

		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (direction.z != 0.0) {
		t1 = (bmin.z - origin.z) / direction.z;
		t2 = (bmax.z - origin.z) / direction.z;

		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (tmax >= tmin)
		return 1;
	return -1;
}

int Raycast(float3 origin, float3 direction, inout float distance) {
	if (_NodeCounts == 0)
		return -1;

	LKDNode stack[100];
	stack[0] = _Tree[_RootNode];
	int stackcount = 1;

	int hitindex = -1;
	int ishit;
	int i = -1;
	int begin = -1;
	int end = -1;

	LKDNode node;

	while (stackcount > 0 && stackcount < 100) {
		if (begin >= 0 && end >= 0 && i <= end) {
			if (RaycastTriangle(direction, origin, _Triangles[i], distance) >= 0) {
				hitindex = i;
			}
			i += 1;
			continue;
		}

		node = stack[stackcount - 1];

		stackcount -= 1;

		ishit = RaycastBounds(node.min, node.max, origin, direction);

		if (ishit >= 0 && node.leftChild >= 0) {
			stack[stackcount] = _Tree[node.leftChild];
			stackcount += 1;
		}
		if (ishit >= 0 && node.rightChild >= 0) {
			stack[stackcount] = _Tree[node.rightChild];
			stackcount += 1;
		}
		if (ishit >= 0 && node.dataBegin >= 0 && node.dataEnd >= 0) {
			begin = node.dataBegin;
			end = node.dataEnd;
			i = begin;
		}
	}
	return hitindex;
}

[numthreads(16,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float distance = 9999999;
	int raycastindex = Raycast(_Origin.xyz, _Direction.xyz, distance);
	uint index;

	//[branch]
	if (raycastindex >= 0) {
		index = 0;
		InterlockedAdd(_Args[1], 1, index);
		_Result[index] = _Triangles[raycastindex];
	}
}
