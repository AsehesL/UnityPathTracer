#pragma kernel CSMain

#define MAX_DEPTH 6
#define PI 3.14159265359f

struct Node {
	float3 min;
	float3 max;
	int leftChild;
	int rightChild;
	int dataIndex;
};

struct Triangle {
	float3 vertex0;
	float3 vertex1;
	float3 vertex2;
	float3 normal0;
	float3 normal1;
	float3 normal2;
	int matid;
};

struct Material {
    float3 albedo;
    float3 emissive;
    float roughness;
};

struct Ray {
    float3 origin;
    float3 direction;  
};

struct RaycastHit {
    float distance;
    float3 hitpoint;
    float3 hitnormal;
    int matid;
};

StructuredBuffer<Node> _Tree;
StructuredBuffer<Triangle> _Triangles;
StructuredBuffer<Material> _Materials;

RWTexture2D<float4> _Result;

int _NodeCounts;
int _RootNode;

int _TexWidth;
int _TexHeight;

float _Near;
float _NearClipWidth;
float _NearClipHeight;

float _Time;

float4x4 _CameraToWorld;

TextureCube<float4> _Sky;
SamplerState _LinearClamp;

float _Seed = 0.;
float Rand() { return frac(sin(_Seed++)*43758.5453123); }

float3 ImportanceGGX(float2 sp, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0f * PI * sp.x;
    float cos_theta = sqrt((1.0 - sp.y) / (1.0 + (a * a - 1.0) * sp.y));
    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    return float3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
}

int RaycastTriangle(Ray ray, Triangle tg, inout RaycastHit hit) {

	float3 o = ray.origin + normalize(ray.direction) * 0.0000001;

	float3 e1 = tg.vertex1 - tg.vertex0;
	float3 e2 = tg.vertex2 - tg.vertex0;

	float2 uv = 0;

	float3 n = cross(e1, e2);
	float ndv = dot(ray.direction, n);

	float3 p = cross(ray.direction, e2);

	float det = dot(e1, p);
	float3 t = float3(0, 0, 0);
	if (det > 0.0)
	{
		t = o - tg.vertex0;
	}
	else
	{
		t = tg.vertex0 - o;
		det = -det;
	}
	if (det < 0.0000001f)
	{
		return -1;
	}

	uv.x = dot(t, p);
	if (uv.x < 0.0f || uv.x > det)
		return -1;

	float3 q = cross(t, e1);

	uv.y = dot(ray.direction, q);
	if (uv.y < 0.0f || uv.x + uv.y > det)
		return -1;

	float myt = dot(e2, q);

	float finvdet = 1.0f / det;
	myt *= finvdet;
	if (myt < 0.001f)
		return -1;
	if (myt > hit.distance)
		return -1;
	
	uv.x *= finvdet;
	uv.y *= finvdet;

    hit.distance = myt;
	hit.hitpoint = o + ray.direction * hit.distance;
	hit.hitnormal = (1.0 - uv.x - uv.y) * tg.normal0 + uv.x * tg.normal1 + uv.y * tg.normal2;
	hit.matid = tg.matid;

	return 1;
}

int RaycastBounds(Ray ray, float3 bmin, float3 bmax, out float hitdistance) {

	float tmin = -999999999;
	float tmax = 999999999;
	float t1, t2;

	if (ray.direction.x != 0.0) {
		t1 = (bmin.x - ray.origin.x) / ray.direction.x;
		t2 = (bmax.x - ray.origin.x) / ray.direction.x;
		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (ray.direction.y != 0.0) {
		t1 = (bmin.y - ray.origin.y) / ray.direction.y;
		t2 = (bmax.y - ray.origin.y) / ray.direction.y;
		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (ray.direction.z != 0.0) {
		t1 = (bmin.z - ray.origin.z) / ray.direction.z;
		t2 = (bmax.z - ray.origin.z) / ray.direction.z;
		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (tmax >= tmin) {
		hitdistance = tmin;
		return 1;
	}
	hitdistance = 0;
	return -1;
}

int Raycast(Ray ray, inout RaycastHit hit) {
	if (_NodeCounts == 0)
		return -1;
	Node stack[100];
	Node node, leftnode, rightnode;
	node = _Tree[_RootNode];
	//stack[0] = _Tree[_RootNode];
	int stackcount = 0;

	int hitindex = -1;
	float leftdis, rightdis;
	int ishitleft = RaycastBounds(ray, node.min, node.max, leftdis);
	int ishitright = -1;
	if (ishitleft > 0) {
		stack[0] = node;
		stackcount = 1;
	}

	while (stackcount > 0 && stackcount < 100) {
		node = stack[stackcount - 1];

		stackcount -= 1;

		if (node.dataIndex < 0) {
			leftnode = _Tree[node.leftChild];
			rightnode = _Tree[node.rightChild];
			ishitleft = RaycastBounds(ray, leftnode.min, leftnode.max, leftdis);
			ishitright = RaycastBounds(ray, rightnode.min, rightnode.max, rightdis);
			if (ishitleft > 0 && ishitright > 0) {
				if (leftdis < rightdis) {
					stack[stackcount] = _Tree[node.rightChild];
					stack[stackcount + 1] = _Tree[node.leftChild];
					stackcount += 2;
				}
				else {
					stack[stackcount] = _Tree[node.leftChild];
					stack[stackcount + 1] = _Tree[node.rightChild];
					stackcount += 2;
				}
			}
			else if (ishitleft > 0) {
				stack[stackcount] = _Tree[node.leftChild];
				stackcount += 1;
			}
			else if (ishitright > 0) {
				stack[stackcount] = _Tree[node.rightChild];
				stackcount += 1;
			}
		}
		else {
			if (RaycastTriangle(ray, _Triangles[node.dataIndex], hit) >= 0) {
				hitindex = node.dataIndex;
			}
		}
	}
	return hitindex;
}

float3 SampleSky(float3 dir) {
	return _Sky.SampleLevel(_LinearClamp, dir, 0).rgb;
	//return float3(0,0,1);
}

[numthreads(2,2,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    _Seed = _Time + (float)(_TexHeight * id.x) / _TexWidth + ((float)id.y) / _TexHeight;

	float x = ((((float)id.x) / _TexWidth) * 2.0 - 1.0) * _NearClipWidth;
	float y = ((((float)id.y) / _TexHeight) * 2.0 - 1.0) * _NearClipHeight;

	float3 pos = float3(x, y, _Near);
	
	Ray ray;
	ray.origin = mul(_CameraToWorld, float4(pos.xyz, 1.0)).xyz;
	ray.direction = normalize(mul((float3x3)_CameraToWorld, pos));
	
	RaycastHit hit;
	hit.distance = 9999999.0;
	hit.hitpoint = 0;
	hit.hitnormal = 0;
	hit.matid = 0;
	
	//float diffuse = 1;
	//float4 col = float4(1, 1, 1, 1);
	
	float3 acc = float3(0,0,0);
    float3 mask = float3(1,1,1);

    int raycastindex = 0;

	[unroll]
	for (int i = 0; i < MAX_DEPTH; i++) {
		raycastindex = Raycast(ray, hit);

		if (raycastindex >= 0) {
			ray.origin = hit.hitpoint;
            
            float3 u = normalize(cross(float3(0.00424f, 1, 0.00764f), hit.hitnormal));
            float3 v = cross(u, hit.hitnormal);
            float r2 = Rand();
            float3 sp = ImportanceGGX(float2(sqrt(r2), Rand()), _Materials[hit.matid].roughness);
            float3 d = sp.x * u + sp.y * v + sp.z * hit.hitnormal;
			
			ray.direction = reflect(ray.direction, d);
			
			    acc += mask * _Materials[hit.matid].emissive;
			    mask *= _Materials[hit.matid].albedo;
			
		}
		else {
			//col.rgb = col.rgb * SampleSky(ray.direction);
			acc += mask * SampleSky(ray.direction);
			break;
		}
	}

	_Result[id.xy] = float4(acc, 1.0);
}
