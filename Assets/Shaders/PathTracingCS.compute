#pragma kernel CSMain

#define MAX_DEPTH 3
#define PI 3.14159265359f

struct Node {
	float3 min;
	float3 max;
	int leftChild;
	int rightChild;
	int dataBegin;
	int dataEnd;
};

struct Triangle {
	float3 vertex0;
	float3 vertex1;
	float3 vertex2;
	float3 normal0;
	float3 normal1;
	float3 normal2;
};

StructuredBuffer<Node> _Tree;
StructuredBuffer<Triangle> _Triangles;

int _NodeCounts;
int _RootNode;

RWTexture2D<float4> _Result;

int _TexWidth;
int _TexHeight;

float _Near;
float _NearClipWidth;
float _NearClipHeight;

float4x4 _CameraToWorld;

TextureCube<float4> _Sky;
SamplerState _LinearClamp;

int _SampleOffset;
int _SampleNum;

int RaycastTriangle(float3 dir, float3 orig, Triangle tg, inout float rt, inout float3 hitvertex, inout float3 hitnormal) {

	float3 o = orig + normalize(dir) * 0.0000001;

	float3 e1 = tg.vertex1 - tg.vertex0;
	float3 e2 = tg.vertex2 - tg.vertex0;

	float2 uv = 0;

	float3 n = cross(e1, e2);
	float ndv = dot(dir, n);

	float3 p = cross(dir, e2);

	float det = dot(e1, p);
	float3 t = float3(0, 0, 0);
	if (det > 0.0)
	{
		t = o - tg.vertex0;
	}
	else
	{
		t = tg.vertex0 - o;
		det = -det;
	}
	if (det < 0.0000001f)
	{
		return -1;
	}

	uv.x = dot(t, p);
	if (uv.x < 0.0f || uv.x > det)
		return -1;

	float3 q = cross(t, e1);

	uv.y = dot(dir, q);
	if (uv.y < 0.0f || uv.x + uv.y > det)
		return -1;

	float myt = dot(e2, q);

	float finvdet = 1.0f / det;
	myt *= finvdet;
	if (myt < 0.001f)
		return -1;
	if (myt > rt)
		return -1;
	rt = myt;
	uv.x *= finvdet;
	uv.y *= finvdet;

	hitvertex = o + dir * rt;
	hitnormal = (1.0 - uv.x - uv.y) * tg.normal0 + uv.x * tg.normal1 + uv.y * tg.normal2;

	return 1;
}

int RaycastBounds(float3 bmin, float3 bmax, float3 origin, float3 direction) {
	float tmin = -999999999;
	float tmax = 999999999;
	float t1, t2;

	if (direction.x != 0.0) {
		t1 = (bmin.x - origin.x) / direction.x;
		t2 = (bmax.x - origin.x) / direction.x;

		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (direction.y != 0.0) {
		t1 = (bmin.y - origin.y) / direction.y;
		t2 = (bmax.y - origin.y) / direction.y;

		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (direction.z != 0.0) {
		t1 = (bmin.z - origin.z) / direction.z;
		t2 = (bmax.z - origin.z) / direction.z;

		tmin = max(tmin, min(t1, t2));
		tmax = min(tmax, max(t1, t2));
	}
	if (tmax >= tmin)
		return 1;
	return -1;
}

int Raycast(float3 origin, float3 direction, inout float distance, inout float3 hitvertex, inout float3 hitnormal) {
	if (_NodeCounts == 0)
		return -1;

	Node stack[100];
	stack[0] = _Tree[_RootNode];
	int stackcount = 1;

	int hitindex = -1;
	int ishit;
	int i = -1;
	int begin = -1;
	int end = -1;

	Node node;

	while (stackcount > 0 && stackcount < 100) {
		if (begin >= 0 && end >= 0 && i <= end) {
			if (RaycastTriangle(direction, origin, _Triangles[i], distance, hitvertex, hitnormal) >= 0) {
				hitindex = i;
			}
			i += 1;
			continue;
		}

		node = stack[stackcount - 1];

		stackcount -= 1;

		ishit = RaycastBounds(node.min, node.max, origin, direction);

		if (ishit >= 0 && node.leftChild >= 0) {
			stack[stackcount] = _Tree[node.leftChild];
			stackcount += 1;
		}
		if (ishit >= 0 && node.rightChild >= 0) {
			stack[stackcount] = _Tree[node.rightChild];
			stackcount += 1;
		}
		if (ishit >= 0 && node.dataBegin >= 0 && node.dataEnd >= 0) {
			begin = node.dataBegin;
			end = node.dataEnd;
			i = begin;
		}
	}
	return hitindex;
}

float RadicalInverseVdC(uint bits) {
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10;
}

float2 Hammersley2D(uint i, uint N) {
	return float2(float(i) / float(N), RadicalInverseVdC(i));
}

float3 Hemisphere(float e, float2 sp) {
	float cos_phi = cos(2.0 * PI * sp.x);
	float sin_phi = sin(2.0 * PI * sp.x);
	float cos_theta = pow(1.0 - sp.y, 1.0 / (e + 1.0));
	float sin_theta = sqrt(1.0 - cos_theta * cos_theta);
	float pu = sin_theta * cos_phi;
	float pv = sin_theta * sin_phi;
	float pw = cos_theta;

	return float3(pu, pv, pw);
}

float3 SampleDirection(float3 dir, float2 sp, float e) {
	float3 w = normalize(dir);
	float3 u = normalize(cross(float3(0.00424, 1, 0.00764), w));
	float3 v = cross(u, w);

	float3 h = Hemisphere(e, sp);

	return h.x * u + h.y * v + h.z * w;
}

[numthreads(4,4,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	/*float x = ((((float)id.x) / _TexWidth) * 2.0 - 1.0) * _NearClipWidth;
	float y = ((((float)id.y) / _TexHeight) * 2.0 - 1.0) * _NearClipHeight;

	float3 pos = float3(x, y, _Near);

	float3 origin = mul(_CameraToWorld, float4(pos.xyz, 1.0)).xyz;
	float3 dir = normalize(mul((float3x3)_CameraToWorld, pos));

	float distance = 9999999;
	float3 hitnormal = 0, hitvertex = 0;*/

	int spindex = (int)(frac(((float)(id.y * _TexWidth + id.x)) / _SampleNum) * _SampleNum) + _SampleOffset;
	//int spindex = (int)(frac((id.y * _TexWidth + id.x) / _SampleNum) * _SampleNum) + _SampleOffset;
	//int spnum = _TexWidth * _TexHeight;
	
	float2 sampleCoord = Hammersley2D(spindex, _SampleNum);
	float x = ((((float)id.x) / _TexWidth + 1.0 / _TexWidth * sampleCoord.x) * 2.0 - 1.0) * _NearClipWidth;
	float y = ((((float)id.y) / _TexHeight + 1.0 / _TexHeight * sampleCoord.y) * 2.0 - 1.0) * _NearClipHeight;

	float3 pos = float3(x, y, _Near);

	float3 origin = mul(_CameraToWorld, float4(pos.xyz, 1.0)).xyz;
	float3 dir = normalize(mul((float3x3)_CameraToWorld, pos));

	float distance = 9999999;
	float3 hitnormal = 0, hitvertex = 0;

	float diffuse = 1;
	float4 col = float4(0,0,0,1);

	for (int i = 0; i < MAX_DEPTH; i++) {
		int raycastindex = Raycast(origin, dir, distance, hitvertex, hitnormal);

		if (raycastindex >= 0) {
			origin = hitvertex;
			dir = reflect(dir, hitnormal);
			//dir = SampleDirection(hitnormal, sampleCoord, 0);
			diffuse *= max(0, dot(hitnormal, dir));// / PI;
		}
		else {
			col = diffuse * _Sky.SampleLevel(_LinearClamp, dir, 0);
			break;
		}
	}

	_Result[id.xy] = col;

	//int raycastindex = Raycast(origin, dir, distance, hitvertex, hitnormal);

	//if (raycastindex >= 0) {
	//	float ndv = max(0, dot(hitnormal, -dir));
	//	origin = hitvertex;
	//	dir = reflect(dir, hitnormal);
	//	distance = 9999999;
	//	//_Result[id.xy] = _Sky.SampleLevel(_LinearClamp, reflect(dir, hitnormal), 0);
	//	raycastindex = Raycast(origin, dir, distance, hitvertex, hitnormal);
	//	if (raycastindex >= 0) {
	//		_Result[id.xy] = _Sky.SampleLevel(_LinearClamp, reflect(dir, hitnormal), 0) * max(0, dot(hitnormal, -dir)) * ndv;
	//	}
	//	else {
	//		_Result[id.xy] = _Sky.SampleLevel(_LinearClamp, dir, 0) * ndv;
	//	}
	//}
	//else {
	//	_Result[id.xy] = _Sky.SampleLevel(_LinearClamp, dir, 0);
	//}
}
