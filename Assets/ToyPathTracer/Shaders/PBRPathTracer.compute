// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PBRPathTracerMain

#define SAMPLE_DIRECT_LIGHT 1
#define MAX_DEPTH 5

#ifndef USE_THIN_LENS
#define USE_THIN_LENS       0
#endif

#include "PathTracing.cginc"
#include "BRDF.cginc"

struct PBRPTMaterial
{
    float4 albedo;
    float roughness;
    float metallic;
    int emissive;
    int checkBoard;
};

StructuredBuffer<PBRPTMaterial> _Materials;

RWTexture2D<float4> _Result;

TextureCube<float4> _Sky;
SamplerState _LinearClamp;

int PBRShading(Ray ray, RaycastHit hit, out float3 radiance, out Ray newray)
{
    newray = (Ray)0;

    PBRPTMaterial mat = _Materials[hit.matId];
    float3 albedoColor = mat.albedo.rgb;
    if (mat.checkBoard > 0)
    {
        float2 c = floor(hit.position.xz) * 0.5;
        albedoColor = lerp(float3(0.02, 0.02, 0.02), albedoColor, frac(c.x + c.y) * 2);
    }
    if (mat.emissive > 0)
    {
        float em = 1.0;
        if (dot(hit.normal.xyz, newray.direction) < 0 || hit.normal.w < 0)
            em = 0.0;
        radiance = albedoColor.rgb * em;
        return -1;
    }
    float NDotV = max(0.0f, dot(normalize(hit.normal.xyz), normalize(-ray.direction)));

    float3 F0 = lerp(float3(0.04, 0.04, 0.04), albedoColor.rgb, mat.metallic);
    float3 fresnel = FresnelSchlick(NDotV, F0, mat.roughness);
    float fresnelAvg = (fresnel.r + fresnel.g + fresnel.b) / 3.0;
    float russianRoulette = Rand();
    int shadingType = SHADING_TYPE_DIFFUSE;
    if (fresnelAvg > russianRoulette)
    {
        shadingType = SHADING_TYPE_REFLECT;
    }
    else if (fresnelAvg + (1.0f - fresnelAvg) * (1.0f - mat.albedo.a) > russianRoulette)
    {
        shadingType = SHADING_TYPE_REFRACT;
    }

    newray.start = hit.position;
    float3 spNormal = hit.normal.xyz;
    if (mat.roughness > 0.001)
    {
        float3 nsp = SampleHemiSphereRough(float2(Rand(), Rand()), mat.roughness);
        spNormal = ONB(hit.normal.xyz, nsp);
    }
    if (shadingType == SHADING_TYPE_REFLECT)
    {
        newray.direction = reflect(ray.direction, spNormal);
        radiance = lerp(1, fresnel, mat.metallic);
        return 1;
    }
    if (shadingType == SHADING_TYPE_REFRACT)
    {
        float eta = hit.normal.w < 0 ? 1.33f : 1.0f / 1.33f;
        float3 rayDir = normalize(ray.direction);
        float3 hitNormal = normalize(spNormal);
        float ndv = dot(-rayDir, hitNormal);
        float3 litDir;
        if (Refract(rayDir, hitNormal, eta, litDir) && FresnelRefract(ndv, eta) <= Rand())
        {
            newray.direction = normalize(litDir);
            newray.start -= hitNormal * PT_FLT_DELTA;
            radiance = albedoColor;
        }
        else
        {
            newray.direction = normalize(reflect(rayDir, hitNormal));
            radiance = 1;
        }
        
        return 1;
    }

#if SAMPLE_DIRECT_LIGHT
    newray.start = hit.position;
    float3 ldir0, ldir1;
    float pdf0, pdf1;
    DirectionalSample(hit, ldir0, pdf0);
    CosineSample(hit, ldir1, pdf1);

    float w0 = pdf0 / (pdf0 + pdf1);
    float w1 = pdf1 / (pdf0 + pdf1);
    float w = 0;
    float pdf = 0;

    float p = Rand();
    if (p < w0)
    {
        newray.direction = ldir0;
        w = w0;
        pdf = pdf0;
    }
    else
    {
        newray.direction = ldir1;
        w = w1;
        pdf = pdf1;
    }
    if (pdf < 0)
        radiance = 0;
    else
        radiance = max(0, dot(hit.normal.xyz, newray.direction)) * (1.0 - mat.metallic) * albedoColor * PT_INVPI / pdf * w;
    return 1;
#else
    float3 ldir;
    float pdf;
    CosineSample(hit, ldir, pdf);
    newray.direction = ldir;
    radiance = max(0, dot(hit.normal.xyz, newray.direction)) * (1.0 - mat.metallic) * albedoColor * PT_INVPI / pdf;
    return 1;
#endif
}

float3 SkyShading(Ray ray)
{
    return pow(_Sky.SampleLevel(_LinearClamp, ray.direction, 0).rgb, 2.2);
    //return _Sky.SampleLevel(_LinearClamp, ray.direction, 0).rgb;
}

IMPLEMENT_PATH_TRACING(TestPT, SkyShading, PBRShading)

[numthreads(32, 32, 1)]
void PBRPathTracerMain(uint3 id : SV_DispatchThreadID)
{
    InitRandomSeed(id.x, id.y);

    float2 uv = float2(((float)id.x + Rand()) / _ScreenWidth, ((float)id.y + Rand()) / _ScreenHeight);

    float3 color = EXECUTE_PATH_TRACING(TestPT, uv);

    color = pow(color, 0.45);
    _Result[id.xy] = float4(color, 1.0);
}
