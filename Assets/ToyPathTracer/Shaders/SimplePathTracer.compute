// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PTMain
#pragma multi_compile_local __ ENABLE_NEXT_EVENT_ESTIMATION
#pragma multi_compile_local __ ENABLE_THIN_LENS

#pragma enable_d3d11_debug_symbols 

#define MAX_DEPTH 5

#if ENABLE_NEXT_EVENT_ESTIMATION
#define USE_NEXT_EVENT_ESTIMATION 1
#else
#define USE_NEXT_EVENT_ESTIMATION 0
#endif

#if ENABLE_THIN_LENS
#define USE_THIN_LENS       1
#else
#define USE_THIN_LENS       0
#endif

#include "PathTracing.cginc"
#include "BRDF.cginc"
#include "SkyLight.cginc"

RWTexture2D<float4> _Result;

int SimplePTShading(Ray ray, RaycastHit hit, out float3 radiance, out Ray newray)
{
    newray = (Ray)0;
    PTMaterial mat = _Materials[hit.matId];
    if (mat.emission > 0)
    {
        float em = 1.0;
        if (hit.normal.w < 0)
            em = 0.0;
        radiance = mat.albedo.rgb;// * em;
        return -1;
    }
    newray.start = hit.position;
    if (mat.albedo.a < 0.1)
    {
        float eta = hit.normal.w < 0 ? 1.33f : 1.0f / 1.33f;
        float3 rayDir = normalize(ray.direction);
        float3 hitNormal = normalize(hit.normal.xyz);
        float ndv = dot(-rayDir, hitNormal);
        float3 litDir;
        if (Refract(rayDir, hitNormal, eta, litDir) && Fresnel(ndv, eta) <= Rand())
        {
            newray.direction = normalize(litDir);
            newray.start -= hitNormal * PT_FLT_DELTA;
        }
        else
        {
            newray.direction = normalize(reflect(rayDir, hitNormal));
        }
        radiance = mat.albedo.rgb;
        return 1;
    }
    if (mat.roughness < 0.1)
    {
        newray.direction = reflect(ray.direction, hit.normal.xyz);
        radiance = mat.albedo.rgb;
        return 1;
    }

#if USE_NEXT_EVENT_ESTIMATION
    newray.start = hit.position;
    float3 ldir0, ldir1;
    float pdf0, pdf1;
    DirectionalSample(hit, ldir0, pdf0);
    CosineSample(hit, ldir1, pdf1);

    float sqrPdf0 = pdf0 * pdf0;
    float sqrPdf1 = pdf1 * pdf1;
    float w0 = sqrPdf0 / (sqrPdf0 + sqrPdf1);
    float w1 = sqrPdf1 / (sqrPdf0 + sqrPdf1);
    float w = 0;
    float pdf = 0;

    float p = Rand();
    if (p < w0)
    {
        newray.direction = ldir0;
        w = w0;
        pdf = pdf0;
    }
    else
    {
        newray.direction = ldir1;
        w = w1;
        pdf = pdf1;
    }
    if (pdf <= 0)
        radiance = 0;
    else
        radiance = max(0, dot(hit.normal.xyz, newray.direction)) * mat.albedo.rgb * PT_INVPI / pdf * w;
    return 1;
#else
    float3 ldir;
    float pdf;
    CosineSample(hit, ldir, pdf);
    newray.direction = ldir;
    radiance = max(0, dot(hit.normal.xyz, newray.direction)) * mat.albedo.rgb * PT_INVPI / pdf;
    return 1;
#endif
}

IMPLEMENT_PATH_TRACING(SimplePT, EnvSkyShading, SimplePTShading)

[numthreads(32,32,1)]
void PTMain(uint3 id : SV_DispatchThreadID)
{
    InitRandomSeed(id.x, id.y);

    float2 uv = float2(((float)id.x + Rand()) / _ScreenWidth, ((float)id.y + Rand()) / _ScreenHeight);
    
    float3 color = EXECUTE_PATH_TRACING(SimplePT, uv);

    _Result[id.xy] = float4(color, 1.0);
}
